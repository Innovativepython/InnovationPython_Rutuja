#1. Write a program in Python to find out the character in a string which is uppercase using list
#comprehension.

Ans:
string=str(input("Enter a string: "))
result = [i for i in string if i.isupper()]
print("Result: ", str(result))

#2. Write a program to construct a dictionary from the two lists containing the names of students and
#their corresponding subjects. The dictionary should map the students with their respective subjects.
#Let’s see how to do this using for loops and dictionary comprehension.
#HINT - Use Zip function also
#Sample input: students = ['Smit', 'Jaya', 'Rayyan'] subjects = ['CSE', 'Networking', 'Operating System']
#Expected output: {‘Smit’ : ’CSE’ , ’Jaya’ : ’Networking’ , ’Rayyan’ : ’Operating System’}

Ans:
students = ['Smit', 'Java', 'Rayyan']
subjects = ['CSE', 'Networking', 'Operating System']
output={k:v for (k, v) in zip(students, subjects)}
print("Output:", output)


#3. Learn More about Yield, next and Generators

Ans:
Yield: Yield is used for returning some value from a function. The difference between yield and return statement
 is that return statements terminates function entirely while yield statement pauses the function and it will save
 all the states and later continues from there on successive calls.

Next: Next is the function used for returning next item in the sequence. It will iterate through all the items of
 iterator. It will raise StopIteration, once it reaches at the end and there is no more data to be returned.

Generators: Generator is a function that returns object (iterator) which can iterate over one value at a time.
 If a function contains yield statement, it can be considered as generator. Python generators are easy to implement,
 memory efficient and represents infinite stream of data.


#4. Write a program in Python using generators to reverse the string.
#Input String = “Consultadd Training”
Ans:
def reverse(a):
    a = a[::-1]
    yield a

a = str(input("Enter a string: "))
g = reverse(a)
print(next(g))


#5. Write an example on decorators.
Ans:
def title(function):
    def wrapper():
        func = function()
        make_title = func.title()
        return make_title
    return wrapper
def greetings():
    return "hello world"

g1 = title(greetings)
print(g1())
